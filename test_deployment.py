#!/usr/bin/env python3
"""
Script pour tester le d√©ploiement localement
"""

import os
import sys

def test_imports():
    """Teste tous les imports n√©cessaires"""
    print("üß™ Test des imports...")
    
    try:
        # Test des imports de base
        from flask import Flask
        print("‚úÖ Flask import√© avec succ√®s")
        
        from extensions import db, ma, jwt, migrate
        print("‚úÖ Extensions import√©es avec succ√®s")
        
        # Test des mod√®les
        from Models.mywitti_survey import MyWittiSurvey, MyWittiSurveyOption, MyWittiSurveyResponse
        print("‚úÖ Mod√®les survey import√©s avec succ√®s")
        
        from Models.mywitti_users import MyWittiUser
        print("‚úÖ Mod√®le utilisateur import√© avec succ√®s")
        
        from Models.mywitti_client import MyWittiClient
        print("‚úÖ Mod√®le client import√© avec succ√®s")
        
        from Models.mywitti_advertisement import MyWittiAdvertisement
        print("‚úÖ Mod√®le publicit√© import√© avec succ√®s")
        
        # Test des blueprints
        from Account.views import accounts_bp
        print("‚úÖ Blueprint Account import√© avec succ√®s")
        
        from Customer.views import customer_bp
        print("‚úÖ Blueprint Customer import√© avec succ√®s")
        
        from Lot.views import lot_bp
        print("‚úÖ Blueprint Lot import√© avec succ√®s")
        
        from Admin.views import admin_bp
        print("‚úÖ Blueprint Admin import√© avec succ√®s")
        
        from Advertisement.views import advertisement_bp
        print("‚úÖ Blueprint Advertisement import√© avec succ√®s")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        return False

def test_app_creation():
    """Teste la cr√©ation de l'application Flask"""
    print("\nüß™ Test de cr√©ation de l'application...")
    
    try:
        # D√©finir des variables d'environnement pour les tests
        os.environ['SECRET_KEY'] = 'test-secret-key'
        os.environ['JWT_SECRET_KEY'] = 'test-jwt-secret-key'
        os.environ['DATABASE_URL'] = 'sqlite:///test.db'
        os.environ['FLASK_ENV'] = 'development'
        
        from app import create_app
        app = create_app('development')
        print("‚úÖ Application Flask cr√©√©e avec succ√®s")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de l'application: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ Test de d√©ploiement Witti Witti API")
    print("=" * 50)
    
    # Test des imports
    imports_ok = test_imports()
    
    # Test de cr√©ation de l'app
    app_ok = test_app_creation()
    
    print("\n" + "=" * 50)
    if imports_ok and app_ok:
        print("üéâ Tous les tests sont pass√©s ! L'application est pr√™te pour le d√©ploiement.")
        return 0
    else:
        print("‚ùå Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 