#!/usr/bin/env python3
"""
Script pour tester le d√©marrage de app.py et wsgi.py
"""

import os
import sys
import subprocess
import time

def test_app_startup():
    """Teste le d√©marrage de app.py"""
    print("üß™ Test du d√©marrage de app.py...")
    
    try:
        # D√©finir les variables d'environnement
        env = os.environ.copy()
        env['SECRET_KEY'] = 'test-secret-key'
        env['JWT_SECRET_KEY'] = 'test-jwt-secret-key'
        env['DATABASE_URL'] = 'sqlite:///test.db'
        env['FLASK_ENV'] = 'development'
        
        # D√©marrer app.py en arri√®re-plan
        process = subprocess.Popen(
            [sys.executable, 'app.py'],
            env=env,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # Attendre un peu pour voir s'il d√©marre
        time.sleep(3)
        
        # V√©rifier si le processus est toujours en vie
        if process.poll() is None:
            print("‚úÖ app.py a d√©marr√© avec succ√®s")
            process.terminate()
            process.wait()
            return True
        else:
            stdout, stderr = process.communicate()
            print(f"‚ùå app.py a √©chou√© au d√©marrage:")
            print(f"   STDOUT: {stdout}")
            print(f"   STDERR: {stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test de app.py: {e}")
        return False

def test_wsgi_startup():
    """Teste le d√©marrage de wsgi.py"""
    print("\nüß™ Test du d√©marrage de wsgi.py...")
    
    try:
        # D√©finir les variables d'environnement
        env = os.environ.copy()
        env['SECRET_KEY'] = 'test-secret-key'
        env['JWT_SECRET_KEY'] = 'test-jwt-secret-key'
        env['DATABASE_URL'] = 'sqlite:///test.db'
        env['FLASK_ENV'] = 'development'
        
        # D√©marrer wsgi.py en arri√®re-plan
        process = subprocess.Popen(
            [sys.executable, 'wsgi.py'],
            env=env,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # Attendre un peu pour voir s'il d√©marre
        time.sleep(3)
        
        # V√©rifier si le processus est toujours en vie
        if process.poll() is None:
            print("‚úÖ wsgi.py a d√©marr√© avec succ√®s")
            process.terminate()
            process.wait()
            return True
        else:
            stdout, stderr = process.communicate()
            print(f"‚ùå wsgi.py a √©chou√© au d√©marrage:")
            print(f"   STDOUT: {stdout}")
            print(f"   STDERR: {stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test de wsgi.py: {e}")
        return False

def test_gunicorn_wsgi():
    """Teste le d√©marrage avec Gunicorn"""
    print("\nüß™ Test du d√©marrage avec Gunicorn...")
    
    try:
        # D√©finir les variables d'environnement
        env = os.environ.copy()
        env['SECRET_KEY'] = 'test-secret-key'
        env['JWT_SECRET_KEY'] = 'test-jwt-secret-key'
        env['DATABASE_URL'] = 'sqlite:///test.db'
        env['FLASK_ENV'] = 'development'
        
        # D√©marrer Gunicorn avec wsgi.py
        process = subprocess.Popen(
            ['gunicorn', 'wsgi:app', '--bind', '127.0.0.1:8000', '--timeout', '30'],
            env=env,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # Attendre un peu pour voir s'il d√©marre
        time.sleep(5)
        
        # V√©rifier si le processus est toujours en vie
        if process.poll() is None:
            print("‚úÖ Gunicorn avec wsgi.py a d√©marr√© avec succ√®s")
            process.terminate()
            process.wait()
            return True
        else:
            stdout, stderr = process.communicate()
            print(f"‚ùå Gunicorn avec wsgi.py a √©chou√© au d√©marrage:")
            print(f"   STDOUT: {stdout}")
            print(f"   STDERR: {stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test de Gunicorn: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ Test de d√©marrage des applications")
    print("=" * 50)
    
    # Test des d√©marrages
    app_ok = test_app_startup()
    wsgi_ok = test_wsgi_startup()
    gunicorn_ok = test_gunicorn_wsgi()
    
    print("\n" + "=" * 50)
    print("üìä R√©sultats des tests:")
    print(f"   app.py: {'‚úÖ' if app_ok else '‚ùå'}")
    print(f"   wsgi.py: {'‚úÖ' if wsgi_ok else '‚ùå'}")
    print(f"   gunicorn wsgi:app: {'‚úÖ' if gunicorn_ok else '‚ùå'}")
    
    if app_ok and wsgi_ok and gunicorn_ok:
        print("\nüéâ SUCC√àS: Tous les tests de d√©marrage sont pass√©s !")
        print("‚úÖ wsgi.py fonctionne exactement comme app.py")
        print("‚úÖ Gunicorn peut d√©marrer avec wsgi:app")
        return 0
    else:
        print("\n‚ùå √âCHEC: Certains tests de d√©marrage ont √©chou√©")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 